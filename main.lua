--[[
  Tetris
  By: Tanner Brown
]]

require 'src/Dependencies'

function love.load()



  love.graphics.setDefaultFilter('nearest', 'nearest')
  math.randomseed(os.time())

  push:setupScreen(VIRTUAL_WIDTH, VIRTUAL_HEIGHT, WINDOW_WIDTH, WINDOW_HEIGHT, {
    fullscreen = true,
    vsync = true,
    resizable = true
  })

  gStateStack = StateStack()
  --gStateStack:push(StartState())
  gStateStack:push(TestState())

  --[[ physics stuff ]]

  world = love.physics.newWorld(0, 0, true)

  love.physics.setMeter(VIRTUAL_HEIGHT)
  objects = {}
  objects.board = {}
  objects.board.body = love.physics.newBody(world, VIRTUAL_WIDTH/2, VIRTUAL_HEIGHT/2, 'static')
  objects.board.shape = love.physics.newRectangleShape(BOARD_WIDTH * TILE_SIZE, BOARD_HEIGHT * TILE_SIZE)
  objects.board.fixture = love.physics.newFixture(objects.board.body, objects.board.shape)

  objects.ball = {}
  objects.ball.body = love.physics.newBody(world, 650/2, 650/2, "dynamic") --place the body in the center of the world and make it dynamic, so it can move around
  objects.ball.shape = love.physics.newCircleShape(20) --the ball's shape has a radius of 20
  objects.ball.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 1) -- Attach fixture to body and give it a density of 1.
  objects.ball.fixture:setRestitution(0.9) --let the ball bounce

  --let's create a couple blocks to play around with
  objects.block1 = {}
  objects.block1.body = love.physics.newBody(world, 200, 550, "dynamic")
  objects.block1.shape = love.physics.newRectangleShape(0, 0, 50, 100)
  objects.block1.fixture = love.physics.newFixture(objects.block1.body, objects.block1.shape, 5) -- A higher density gives it more mass.

  objects.block2 = {}
  objects.block2.body = love.physics.newBody(world, 200, 400, "dynamic")
  objects.block2.shape = love.physics.newRectangleShape(0, 0, 100, 50)
  objects.block2.fixture = love.physics.newFixture(objects.block2.body, objects.block2.shape, 2)

  --[[ End physics stuff ]]

  love.keyboard.keysPressed = {}

end



function love.update(dt)

  Timer.update(dt)
  gStateStack:update(dt)
  world:update(dt)

  --here we are going to create some keyboard events
  if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
    objects.ball.body:applyForce(400, 0)
  elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
    objects.ball.body:applyForce(-400, 0)
  elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
    objects.ball.body:setPosition(650/2, 650/2)
    objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  end


  love.keyboard.keysPressed = {}



end



function love.draw()

  push:start()
  gStateStack:render()
  push:finish()

end



function love.resize(w, h)
  push:resize(w,h)
end

function love.keypressed(key)
  if key == 'escape' then
    love.event.quit()
  end

  love.keyboard.keysPressed[key] = true
end

function love.keyboard.wasPressed(key)
  return love.keyboard.keysPressed[key]
end

  